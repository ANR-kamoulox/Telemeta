# README
# ======

Telemeta: backups, transcodes, tags and marks any audio content with metadata


# 1. Introduction
# ===============

Telemeta is a global audio archiving program which introduces useful and secure
indexing methods to backup digitalized audio files and metadata dictionnaries.
It is dedicated to backup any digitized and documented sound from collections of
vinyls, magnetic tapes or audio CD over a strong database in accordance with
many standards. Export functions also encapsulate edited metadata into
compressed file. The object style architecture will soon provide user-friendly
interfaces and plugin' style audio processing.

Here are the main features of Telemeta: 

    * Secure media editing and archiving over networks.
    * Easy transcoding
    * Full tagging and marking methods
    * XML metadata backup
    * Web interface introducing WorkFlow.
    * SQL backend (still in dev from march 2007).
    * Data anti-corruption security with par2 recovery keys
    * Data synchronizing over remote servers (rsync)
    * Auto AudioMarking? from metadata (thanks to Festival and Ecasound) 

The Telemeta concept is based on collections. A collection includes original
sounds - or albums containing sounds - which will be backuped in a secure way
with a view of transcoded 'public' formats (WAV, FLAC, MP3, OGG and many more
soon...) including metadata editing and publishing tools.


# 2. Requirements
# ===============

python (>= 2.3.5-7), python-xml, python-central (>= 0.5),
python-mutagen, python-django, sox, vorbis-tools, flac, normalize-audio,
ecasound, festival, par2, python-mysqldb, sqlite3 | mysql-server, octave2.9,
octave2.9-forge, python-tk


# 3. Installation and usage
# =========================

1 - Checkout Telemeta:

    $ cd ~/my_apps
    $ svn co http://svn.yomix.org/svn/telemeta/trunk telemeta 

    Compile wav2png in telemeta/telemeta/visualization/wav2png (you will need
    libgd and libsndfile for that)

2 - Install the development version of the Django framework:

    Warning: last know revision that works with Telemeta: 5313
    See http://www.djangoproject.com

3 - Create a Django project if you haven't already done it:

    $ cd ~/my_projects
    $ django-admin startproject mysite

4 - Put a link to telemeta into your Django project:

    $ ln -s ~/my_apps/telemeta/telemeta ~/my_projects/mysite/telemeta

    OR: add the telemeta path to PYTHONPATH

5 - Create the media and cache directories:

    $ cd mysite
    $ mkdir media cache

    You might want to place these somewhere else

6 - Configure Django (settings.py):

    Modifiy the following variables:

    DATABASE_*: your database settings (don't forget to create the database if needed)
    MEDIA_ROOT: absolute path to the media directory you just created
    INSTALLED_APPS: add 'mysite.telemeta'

    Add the following variables:

    TELEMETA_CACHE_DIR: absolute path to the cache directory you just created

    Just paste the two lines below:
    TELEMETA_EXPORT_CACHE_DIR = TELEMETA_CACHE_DIR + "/export"
    CACHE_BACKEND = "file://" + TELEMETA_CACHE_DIR + "/data"

7 - Initialize the database:

    $ python manage.py syncdb

8 - Configure your urls:

    The simplest case is to have telemeta running at public root. To do so, add 
    this url in urls.py :

    (r'^', include('telemeta.urls')),

9 - Start the project:

    $ python manage.py runserver 

10 - Go the web page:

    http://localhost:8000


See INSTALL and http://svn.parisson.org/telemeta for more informations.


# 4. Feedback
# ===========

Please give me some feedback. Tell me if Telemeta suits you or if you
would need some other interesting features.  You are welcome to mail me
at <yomguy@altern.org>


# 5. Contact
# ==========

Home page : http://svn.parisson.org/telemeta
E-mail    : Guillaume Pellerin <yomguy@altern.org>

